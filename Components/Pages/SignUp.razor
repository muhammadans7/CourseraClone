@page "/signup"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject courseraClone.Services.UserService UserService
@inject courseraClone.Services.AccountService AccountService
@rendermode InteractiveServer

<h1>Sign Up</h1>

<div class="row">
    <div class="col-md-12">
        <!-- Simplify the form to ensure proper submission -->
        <EditForm Model="@signupModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label>FullName</label>
                <InputText @bind-Value="signupModel.FullName" type="password" class="form-control" />
                <ValidationMessage For="@(() => signupModel.FullName)" />
            </div>

            <div class="form-group">
                <label>Email</label>
                <InputText @bind-Value="signupModel.Email" class="form-control" />
                <ValidationMessage For="@(() => signupModel.Email)" />
            </div>

            <div class="form-group">
                <label>Password</label>
                <InputText @bind-Value="signupModel.Password" type="password" class="form-control" />
                <ValidationMessage For="@(() => signupModel.Password)" />
            </div>

            <div class="form-group">
                <label>Confirm Password</label>
                <InputText @bind-Value="signupModel.ConfirmPassword" type="password" class="form-control" />
                <ValidationMessage For="@(() => signupModel.ConfirmPassword)" />
            </div>

            <button type="submit" class="btn btn-primary">Register</button>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger mt-2">
                    @errorMessage
                </div>
            }
        </EditForm>
    </div>
</div>

@code {



    private SignupViewModel signupModel = new SignupViewModel();
    private string? errorMessage;

    // Handle form submission
    private async Task HandleValidSubmit()
    {
        // Ensure passwords match before proceeding
        if (signupModel.Password != signupModel.ConfirmPassword)
        {
            errorMessage = "Passwords do not match.";

            return;
        }



        // Call UserService to register the user

        @* var result = await UserService.RegisterUserAsync(signupModel.Email, signupModel.Password); *@



        var result = await AccountService.RegisterUserAsync(signupModel.FullName, signupModel.Email, signupModel.Password);

        if (result)
        {
            // Registration successful, navigate to login page
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            // If registration fails (e.g., user already exists)
            errorMessage = $"Registration failed. The user may already exist. {result} ";
        }
    }

    public class SignupViewModel
    {
        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required.")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Confirm Password is required.")]
        public string ConfirmPassword { get; set; } = string.Empty;

        public string? FullName { get; set; }
    }
}
